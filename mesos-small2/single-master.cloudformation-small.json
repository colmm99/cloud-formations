{"Metadata": {"TemplateGenerationDate": "2015-08-12 20:16:18.010141", "DcosImageCommit": "a0d58ce69d8d9c6ec9661c26cab6eb103e2e66ae"}, "Parameters": {"KeyName": {"Description": "Name of SSH key to link", "Type": "AWS::EC2::KeyPair::KeyName"}, "AdminLocation": {"ConstraintDescription": "must be a valid CIDR.", "MaxLength": "18", "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$", "MinLength": "9", "Description": "The IP range to whitelist for admin access.", "Default": "0.0.0.0/0", "Type": "String"}, "AcceptEULA": {"AllowedValues": ["Yes"], "Description": "Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/", "Type": "String"}, "SlaveInstanceCount": {"Description": "Number of slave nodes to launch", "Default": "5", "Type": "Number"}, "PublicSlaveInstanceCount": {"Description": "Number of public slave nodes to launch", "Default": "1", "Type": "Number"}}, "Mappings": {"RegionToAmi": {"ap-northeast-1": {"stable": "ami-22d27b22"}, "us-west-1": {"stable": "ami-bf8477fb"}, "sa-east-1": {"stable": "ami-45a62a58"}, "us-west-2": {"stable": "ami-f5a5a5c5"}, "eu-central-1": {"stable": "ami-02211b1f"}, "ap-southeast-1": {"stable": "ami-0ef1f15c"}, "eu-west-1": {"stable": "ami-50f4b927"}, "ap-southeast-2": {"stable": "ami-2b2e6911"}, "us-gov-west-1": {"stable": "ami-e53a59c6"}, "us-east-1": {"stable": "ami-6b1cd400"}}, "Parameters": {"SlaveInstanceType": {"default": "micro"}, "PrivateSubnetRange": {"default": "10.0.0.0/22"}, "PublicSubnetRange": {"default": "10.0.4.0/22"}, "StackCreationTimeout": {"default": "PT30M"}, "PublicSlaveInstanceType": {"default": "t2.small"}, "MasterInstanceType": {"default": "t2.small"}, "VPCSubnetRange": {"default": "10.0.0.0/16"}}, "NATAmi": {"ap-northeast-1": {"default": "ami-55c29e54"}, "us-west-1": {"default": "ami-2b2b296e"}, "sa-east-1": {"default": "ami-b972dba4"}, "us-west-2": {"default": "ami-bb69128b"}, "eu-central-1": {"default": "ami-204c7a3d"}, "ap-southeast-1": {"default": "ami-b082dae2"}, "eu-west-1": {"default": "ami-3760b040"}, "ap-southeast-2": {"default": "ami-996402a3"}, "us-east-1": {"default": "ami-4c9e4b24"}}}, "Resources": {"HostKeys": {"Properties": {"UserName": {"Ref": "IAMUser"}}, "Type": "AWS::IAM::AccessKey"}, "SlaveLaunchConfig": {"Properties": {"BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "AssociatePublicIpAddress": "false", "InstanceType": {"Fn::FindInMap": ["Parameters", "SlaveInstanceType", "default"]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Write out dynamic config values\n", "      [Service]\n", "      Type=oneshot\n", "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "    \"name\": |-\n", "      config-writer.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Download the DCOS\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Prep the Pkgpanda working directories for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", "        cfn-signal -e 0 \\\n", "        --resource SlaveServerGroup \\\n", "        --stack ", {"Ref": "AWS::StackName"}, " \\", "\n", "        --region ", {"Ref": "AWS::Region"}, "", "\n", "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", "    \"name\": |-\n", "      cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.mesosphere.com/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    BOOTSTRAP_ID=9e9fb00a14d28255246585f1088cdf81dcf121c2\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |-\n", "    [\"dcos-config--setup_f85e9b37baa6a6e576295efa91ae64d15a3d2320\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    {\n", "      \"environment\": {\n", "        \"PROVIDER\": \"aws\"\n", "      }\n", "    }\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_ACCESS_KEY_ID=", {"Ref": "HostKeys"}, "", "\n", "    AWS_SECRET_ACCESS_KEY=", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "", "\n", "    ZOOKEEPER_CLUSTER_SIZE=1\n", "    MASTER_ELB=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    EXTERNAL_ELB=", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "", "\n", "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", "    # the internal IP when doing lookups on AWS public hostnames.\n", "    FALLBACK_DNS=10.0.0.2\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "    EXHIBITOR_WEB_UI_PORT=8181\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/slave\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}, "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "SecurityGroups": [{"Ref": "SlaveSecurityGroup"}]}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "MasterLaunchConfig": {"Properties": {"BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "AssociatePublicIpAddress": "true", "InstanceType": {"Fn::FindInMap": ["Parameters", "MasterInstanceType", "default"]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Write out dynamic config values\n", "      [Service]\n", "      Type=oneshot\n", "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "    \"name\": |-\n", "      config-writer.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Download the DCOS\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Prep the Pkgpanda working directories for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", "        cfn-signal -e 0 \\\n", "        --resource MasterServerGroup \\\n", "        --stack ", {"Ref": "AWS::StackName"}, " \\", "\n", "        --region ", {"Ref": "AWS::Region"}, "", "\n", "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", "    \"name\": |-\n", "      cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.mesosphere.com/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    BOOTSTRAP_ID=9e9fb00a14d28255246585f1088cdf81dcf121c2\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |-\n", "    [\"dcos-config--setup_f85e9b37baa6a6e576295efa91ae64d15a3d2320\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    {\n", "      \"environment\": {\n", "        \"PROVIDER\": \"aws\"\n", "      }\n", "    }\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_ACCESS_KEY_ID=", {"Ref": "HostKeys"}, "", "\n", "    AWS_SECRET_ACCESS_KEY=", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "", "\n", "    ZOOKEEPER_CLUSTER_SIZE=1\n", "    MASTER_ELB=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    EXTERNAL_ELB=", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "", "\n", "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", "    # the internal IP when doing lookups on AWS public hostnames.\n", "    FALLBACK_DNS=10.0.0.2\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "    EXHIBITOR_WEB_UI_PORT=8181\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/master\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws_master\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}, "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "IamInstanceProfile": {"Ref": "MasterInstanceProfile"}, "SecurityGroups": [{"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}]}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "ElasticLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"UnhealthyThreshold": "2", "HealthyThreshold": "2", "Interval": "30", "Timeout": "5", "Target": "HTTP:5050/health"}, "Listeners": [{"Protocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "InstanceProtocol": "HTTP"}, {"Protocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "InstanceProtocol": "TCP"}], "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}]}, "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "MasterToSlaveIngress": {"Properties": {"GroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterInstanceProfile": {"Properties": {"Roles": [{"Ref": "MasterRole"}], "Path": "/"}, "Type": "AWS::IAM::InstanceProfile"}, "PrivateRouteTable": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::RouteTable"}, "IAMUser": {"Properties": {"Policies": [{"PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Resource": [{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}, "/*"]]}, {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}]]}], "Action": ["s3:AbortMultipartUpload", "s3:DeleteObject", "s3:GetBucketAcl", "s3:GetBucketPolicy", "s3:GetObject", "s3:GetObjectAcl", "s3:ListBucket", "s3:ListBucketMultipartUploads", "s3:ListMultipartUploadParts", "s3:PutObject", "s3:PutObjectAcl"], "Effect": "Allow"}, {"Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}], "Action": ["cloudformation:*"], "Effect": "Allow"}, {"Resource": "*", "Action": ["ec2:DescribeKeyPairs", "ec2:DescribeSubnets", "autoscaling:DescribeLaunchConfigurations", "autoscaling:UpdateAutoScalingGroup", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeScalingActivities", "elasticloadbalancing:DescribeLoadBalancers"], "Effect": "Allow"}]}, "PolicyName": "root"}]}, "Type": "AWS::IAM::User"}, "InternalMasterLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"UnhealthyThreshold": "2", "HealthyThreshold": "2", "Interval": "30", "Timeout": "5", "Target": "HTTP:5050/health"}, "Scheme": "internal", "Listeners": [{"Protocol": "HTTP", "LoadBalancerPort": "5050", "InstancePort": "5050", "InstanceProtocol": "HTTP"}, {"Protocol": "TCP", "LoadBalancerPort": "2181", "InstancePort": "2181", "InstanceProtocol": "TCP"}, {"Protocol": "HTTP", "LoadBalancerPort": "8181", "InstancePort": "8181", "InstanceProtocol": "HTTP"}, {"Protocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "InstanceProtocol": "HTTP"}, {"Protocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "InstanceProtocol": "TCP"}, {"Protocol": "HTTP", "LoadBalancerPort": "8080", "InstancePort": "8080", "InstanceProtocol": "HTTP"}], "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}, {"Ref": "SlaveSecurityGroup"}, {"Ref": "PublicSlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}]}, "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "MasterServerGroup": {"Properties": {"AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "MinSize": 1, "LaunchConfigurationName": {"Ref": "MasterLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "DesiredCapacity": 1, "Tags": [{"Value": "mesos-master", "PropagateAtLaunch": "true", "Key": "role"}], "MaxSize": 1, "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}, {"Ref": "InternalMasterLoadBalancer"}]}, "CreationPolicy": {"ResourceSignal": {"Count": 1, "Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}}}, "Type": "AWS::AutoScaling::AutoScalingGroup"}, "MasterToMasterIngress": {"Properties": {"GroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "ExhibitorS3Bucket": {"Type": "AWS::S3::Bucket", "DeletionPolicy": "Retain"}, "SlaveToPublicSlaveIngress": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicNetworkAcl": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "PublicSlaveIngressFive": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "udp", "CidrIp": "0.0.0.0/0", "FromPort": "23", "ToPort": "5050"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveToMasterIngress": {"Properties": {"GroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSubnetNetworkAclAssociation": {"Properties": {"NetworkAclId": {"Ref": "PublicNetworkAcl"}, "SubnetId": {"Ref": "PublicSubnet"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "SlaveToSlaveIngress": {"Properties": {"GroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveToMasterIngress": {"Properties": {"GroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateSubnet": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Private", "Key": "Network"}], "CidrBlock": {"Fn::FindInMap": ["Parameters", "PrivateSubnetRange", "default"]}, "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::Subnet"}, "PrivateInboundNetworkAclEntry": {"Properties": {"NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "Protocol": "-1", "Egress": "false", "PortRange": {"To": "65535", "From": "0"}, "RuleAction": "allow", "CidrBlock": "0.0.0.0/0", "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "OutboundNetworkAclEntry": {"Properties": {"NetworkAclId": {"Ref": "PublicNetworkAcl"}, "Protocol": "-1", "Egress": "true", "PortRange": {"To": "65535", "From": "0"}, "RuleAction": "allow", "CidrBlock": "0.0.0.0/0", "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "MasterToPublicSlaveIngress": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSubnet": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "CidrBlock": {"Fn::FindInMap": ["Parameters", "PublicSubnetRange", "default"]}, "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::Subnet"}, "PrivateRoute": {"Properties": {"DestinationCidrBlock": "0.0.0.0/0", "RouteTableId": {"Ref": "PrivateRouteTable"}, "InstanceId": {"Ref": "NATInstance"}}, "Type": "AWS::EC2::Route"}, "PublicSlaveIngressThree": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0", "FromPort": "5052", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRouteTable": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::RouteTable"}, "PublicSlaveLaunchConfig": {"Properties": {"BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "AssociatePublicIpAddress": "true", "InstanceType": {"Fn::FindInMap": ["Parameters", "PublicSlaveInstanceType", "default"]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Write out dynamic config values\n", "      [Service]\n", "      Type=oneshot\n", "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", "    \"name\": |-\n", "      config-writer.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Download the DCOS\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Prep the Pkgpanda working directories for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", "        cfn-signal -e 0 \\\n", "        --resource PublicSlaveServerGroup \\\n", "        --stack ", {"Ref": "AWS::StackName"}, " \\", "\n", "        --region ", {"Ref": "AWS::Region"}, "", "\n", "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", "    \"name\": |-\n", "      cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.mesosphere.com/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    BOOTSTRAP_ID=9e9fb00a14d28255246585f1088cdf81dcf121c2\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |-\n", "    [\"dcos-config--setup_f85e9b37baa6a6e576295efa91ae64d15a3d2320\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": !!int |-\n", "    420\n", "- \"content\": |\n", "    {\n", "      \"environment\": {\n", "        \"PROVIDER\": \"aws\"\n", "      }\n", "    }\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_ACCESS_KEY_ID=", {"Ref": "HostKeys"}, "", "\n", "    AWS_SECRET_ACCESS_KEY=", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "", "\n", "    ZOOKEEPER_CLUSTER_SIZE=1\n", "    MASTER_ELB=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    EXTERNAL_ELB=", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "", "\n", "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", "    # the internal IP when doing lookups on AWS public hostnames.\n", "    FALLBACK_DNS=10.0.0.2\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "    EXHIBITOR_WEB_UI_PORT=8181\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/slave_public\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}, "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}]}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "PublicSlaveIngressTwo": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0", "FromPort": "23", "ToPort": "5050"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveServerGroup": {"Properties": {"AvailabilityZones": [{"Fn::GetAtt": ["PrivateSubnet", "AvailabilityZone"]}], "MinSize": {"Ref": "SlaveInstanceCount"}, "LaunchConfigurationName": {"Ref": "SlaveLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PrivateSubnet"}], "DesiredCapacity": {"Ref": "SlaveInstanceCount"}, "Tags": [{"Value": "mesos-slave", "PropagateAtLaunch": "true", "Key": "role"}], "MaxSize": {"Ref": "SlaveInstanceCount"}}, "CreationPolicy": {"ResourceSignal": {"Count": {"Ref": "SlaveInstanceCount"}, "Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}}}, "Type": "AWS::AutoScaling::AutoScalingGroup"}, "DHCPOptions": {"Properties": {"DomainNameServers": ["AmazonProvidedDNS"], "DomainName": {"Fn::If": ["RegionIsUsEast1", "ec2.internal", {"Fn::Join": ["", [{"Ref": "AWS::Region"}, ".compute.internal"]]}]}}, "Type": "AWS::EC2::DHCPOptions"}, "PublicSlaveToSlaveIngress": {"Properties": {"GroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateOutboundNetworkAclEntry": {"Properties": {"NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "Protocol": "-1", "Egress": "true", "PortRange": {"To": "65535", "From": "0"}, "RuleAction": "allow", "CidrBlock": "0.0.0.0/0", "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "InternetGateway": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}]}, "Type": "AWS::EC2::InternetGateway"}, "PrivateNetworkAcl": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "GatewayToInternet": {"Properties": {"InternetGatewayId": {"Ref": "InternetGateway"}, "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::VPCGatewayAttachment"}, "PublicSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PublicSubnet"}, "RouteTableId": {"Ref": "PublicRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "NATInstance": {"Properties": {"KeyName": {"Ref": "KeyName"}, "NetworkInterfaces": [{"GroupSet": [{"Ref": "SlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "DeviceIndex": "0", "SubnetId": {"Ref": "PublicSubnet"}, "AssociatePublicIpAddress": "true", "DeleteOnTermination": "true"}], "SourceDestCheck": "false", "ImageId": {"Fn::FindInMap": ["NATAmi", {"Ref": "AWS::Region"}, "default"]}, "InstanceType": "t2.small"}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Instance"}, "VPCDHCPOptionsAssociation": {"Properties": {"DhcpOptionsId": {"Ref": "DHCPOptions"}, "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::VPCDHCPOptionsAssociation"}, "PublicSlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves Public", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "MasterRole": {"Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"], "Effect": "Allow"}]}, "Policies": [{"PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Resource": [{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}, "/*"]]}, {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}]]}], "Action": ["s3:AbortMultipartUpload", "s3:DeleteObject", "s3:GetBucketAcl", "s3:GetBucketPolicy", "s3:GetObject", "s3:GetObjectAcl", "s3:ListBucket", "s3:ListBucketMultipartUploads", "s3:ListMultipartUploadParts", "s3:PutObject", "s3:PutObjectAcl"], "Effect": "Allow"}, {"Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}], "Action": ["cloudformation:*"], "Effect": "Allow"}, {"Resource": "*", "Action": ["ec2:DescribeKeyPairs", "ec2:DescribeSubnets", "autoscaling:DescribeLaunchConfigurations", "autoscaling:UpdateAutoScalingGroup", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeScalingActivities", "elasticloadbalancing:DescribeLoadBalancers"], "Effect": "Allow"}]}, "PolicyName": "root"}], "Path": "/"}, "Type": "AWS::IAM::Role"}, "SlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "AdminSecurityGroup": {"Properties": {"GroupDescription": "Enable admin access to servers", "VpcId": {"Ref": "Vpc"}, "SecurityGroupIngress": [{"IpProtocol": "-1", "CidrIp": {"Ref": "AdminLocation"}, "FromPort": "0", "ToPort": "65535"}]}, "Type": "AWS::EC2::SecurityGroup"}, "SlaveToMasterLBIngress": {"Properties": {"GroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "2181", "ToPort": "2181"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRoute": {"Properties": {"DestinationCidrBlock": "0.0.0.0/0", "GatewayId": {"Ref": "InternetGateway"}, "RouteTableId": {"Ref": "PublicRouteTable"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Route"}, "PublicSlaveIngressOne": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "tcp", "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "21"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterSecurityGroup": {"Properties": {"GroupDescription": "Mesos Masters", "VpcId": {"Ref": "Vpc"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "5050", "ToPort": "5050"}, {"IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "80", "ToPort": "80"}, {"IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "8080", "ToPort": "8080"}, {"IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "8181", "ToPort": "8181"}, {"IpProtocol": "tcp", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "2181", "ToPort": "2181"}]}, "Type": "AWS::EC2::SecurityGroup"}, "PublicSlaveIngressFour": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "udp", "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "21"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveServerGroup": {"Properties": {"AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "MinSize": {"Ref": "PublicSlaveInstanceCount"}, "LaunchConfigurationName": {"Ref": "PublicSlaveLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "DesiredCapacity": {"Ref": "PublicSlaveInstanceCount"}, "Tags": [{"Value": "mesos-slave", "PropagateAtLaunch": "true", "Key": "role"}], "MaxSize": {"Ref": "PublicSlaveInstanceCount"}, "LoadBalancerNames": [{"Ref": "PublicSlaveLoadBalancer"}]}, "CreationPolicy": {"ResourceSignal": {"Count": {"Ref": "PublicSlaveInstanceCount"}, "Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}}}, "Type": "AWS::AutoScaling::AutoScalingGroup"}, "PrivateSubnetNetworkAclAssociation": {"Properties": {"NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "SubnetId": {"Ref": "PrivateSubnet"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "LbSecurityGroup": {"Properties": {"GroupDescription": "Mesos Master LB", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "PublicSlaveIngressSix": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "udp", "CidrIp": "0.0.0.0/0", "FromPort": "5052", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "RouteTableId": {"Ref": "PrivateRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "PublicSlaveToPublicSlaveIngress": {"Properties": {"GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0", "ToPort": "65535"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"UnhealthyThreshold": "2", "HealthyThreshold": "2", "Interval": "30", "Timeout": "5", "Target": "HTTP:80/"}, "Listeners": [{"Protocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "InstanceProtocol": "HTTP"}, {"Protocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "InstanceProtocol": "TCP"}], "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}]}, "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "Vpc": {"Properties": {"EnableDnsSupport": "true", "Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "CidrBlock": {"Fn::FindInMap": ["Parameters", "VPCSubnetRange", "default"]}, "EnableDnsHostnames": "true"}, "Type": "AWS::EC2::VPC"}, "InboundNetworkAclEntry": {"Properties": {"NetworkAclId": {"Ref": "PublicNetworkAcl"}, "Protocol": "-1", "Egress": "false", "PortRange": {"To": "65535", "From": "0"}, "RuleAction": "allow", "CidrBlock": "0.0.0.0/0", "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}}, "AWSTemplateFormatVersion": "2010-09-09", "Description": "Launching the Mesosphere DCOS cluster", "Conditions": {"RegionIsUsEast1": {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-east-1"]}}, "Outputs": {"PublicSlaveDnsAddress": {"Value": {"Fn::GetAtt": ["PublicSlaveLoadBalancer", "DNSName"]}, "Description": "Public slaves"}, "DnsAddress": {"Value": {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "Description": "Mesos Master"}}}
